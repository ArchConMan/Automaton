{"name":"Automaton","tagline":"A multi tasking table driven finite state machine library for Arduino","body":"\r\nAutomaton is an event driven framework that allows you to create Arduino applications that consist entirely of concurrently running state machines interacting with each other. \r\n\r\n**Features**\r\n- Cooperative multi tasking finite state machines base class for building your own state machines \r\n- State machines are table based, you define the behavior using just a little coding\r\n- Lightweight machine scheduling class with priorities \r\n- Built in state timers (with milli- and microsecond resolutions) and counters\r\n- Communication between machines via a messaging queue\r\n- Sleep states to save microcontroller cycles\r\n- Pin state monitor\r\n- Debugging (state monitor) hooks (that let you see what the machines are doing)\r\n- Enables modular design and separation of concerns\r\n- State machines can be shared as stand alone Arduino libraries (dependent only on the Automaton library)\r\n\r\nDocumentation for the (Factory & Machine) base classes and the bundled state machines is linked in the textbox on the right. If you want to make your own machines, look at the machine tutorial.\r\n\r\n### Machine class ###\r\n\r\nBase class for defining self contained multi-tasking state machine objects.\r\n\r\n### Factory class ###\r\n\r\nAdd your state machines to the factory class, assign them a priority and run them from the Arduino loop().\r\n\r\n## Bundled state machines ##\r\n\r\nTo get you up and running quickly we've bundled a number of ready to use state machines. Combine them to create your application.\r\n\r\n### Atm_button class (state machine) ###\r\n\r\nA state machine for handling button presses, longpresses, repeats, debouncing, etc.\r\n\r\n### Atm_command class (state machine) ###\r\n\r\nA state machine that handles commands coming in over a serial line (Stream), parses and interprets them and fires off a handler callback.\r\n\r\n### Atm_comparator class (state machine) ###\r\n\r\nThis state machine monitors an analog input with a configurable sample rate and fires off a callback whenever one of a list of thresholds are crossed. Optionally keeps a running average to smooth out peaks and troughs.\r\n\r\n### Atm_fade class (state machine) ###\r\n\r\nControl a led via a PWM enabled pin. Control blink speed, pause duration, fade in/out slope and number of repeats.\r\n\r\n### Atm_led class (state machine) ###\r\n\r\nControl a led via a digital pin. Control blink speed, pause duration and number of repeats. Can also be used to control other on/off devices like relays and buzzers.\r\n\r\n### Atm_pulse class (state machine) ###\r\n\r\nMonitor a digital pin for incoming pulses, fire a callback or send a message to another machine.\r\n\r\n### Atm_teensywave class (state machine) ###\r\n\r\nGenerate different waveforms (sine, sawtooth, reverse sawtooth, square, triangle) via the analog out pin of a teensy 3.1. \r\n\r\n### Atm_timer class (state machine) ###\r\n\r\nSimple state machine that provides standard timing event functionality. Configure interval and number of repeats. Can be controlled via the message queue. Fires a callback or sends a message via the message queue when the timer triggers.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}